select * from superstore..Orders;

select * from superstore..people;

select * from superstore..returns;

--Retrieve the total number of orders in the Orders table.

select count(*) as [Total Number of Orders] from superstore..orders;

--Retrieve the orders placed by a specific customer with the customer name 'Tracy Blumstein'.

select * from superstore..orders 
where [customer name] = 'Tracy Blumstein';

--Retrieve the orders with a total sales greater than $500.

select * from superstore..orders 
where sales > 500;

--Retrieve the top 5 customers with the highest total sales amount.

SELECT TOP 5 [customer name], SUM(sales) AS TotalOrderAmount
FROM superstore..Orders
GROUP BY [customer name]
ORDER BY TotalOrderAmount DESC;

--Retrieve the orders placed in the year 2013.

SELECT * 
FROM superstore..ORDERS 
WHERE YEAR([ORDER DATE]) = 2013;

--Retrieve the orders with the order date between '2013-01-01' and '2013-12-31'.

SELECT * 
FROM superstore..ORDERS
WHERE [ORDER DATE] BETWEEN '2013-01-01' AND '2013-12-31';	

--Retrieve the orders with the highest total sales amount for each year.

SELECT year([order date]) as Order_Year, round(max(sales),2) as Sales
FROM superstore..ORDERS
group by year([Order Date]);


--Retrieve the orders that contain a specific product with the product name 'Staples'.

SELECT * FROM superstore..Orders
WHERE [Product Name]='Staples';

--Retrieve the average SALES amount for each month and year

select MONTH([order date]) as Month, year([order date]) as Year, round(AVG(sales),2) as [Average sales]
from superstore..Orders
group by MONTH([order date]),year([order date]) 
order by Year desc, month desc;

--Retrieve the customers who have placed orders in at least two different states.

select [Customer ID],[customer name],Segment, State
from superstore..Orders
where [Customer ID] in (
select [customer id] 
from superstore..Orders 
group by [customer id] 
having count(distinct(state)) >=2)
order by [Customer Name], State;

--Retrieve the total revenue generated by the store for each year.

select year([order date]) as [Order Year], concat(cast(round(sum(profit),2) as varchar),' $') as Revenue
from superstore..Orders
group by year([order date]);

--Retrieve the products with the highest sale quantity.

select [product name], sum(quantity) as Quantity
from superstore..orders
group by [product name]
order by Quantity desc;

--Retrieve the top 3 most profitable products, based on the total revenue generated.

select TOP 3 [Product Name], sum(profit) as Profit
from superstore..orders
group by [Product Name]
order by sum(profit) desc;

--Retrieve the customers who have made consecutive purchases (orders within 7 days of each other).

SELECT DISTINCT o.[Customer ID], o.[Customer Name]
FROM superstore..orders o
JOIN superstore..Orders o1 ON o.[Customer ID] = o1.[Customer ID]
WHERE o.[Order ID] <> o1.[Order ID]
    AND DATEDIFF(Day, o1.[order date], o.[order date]) <= 7;

--Retrieve the average order processing time (in days) for each month.

SELECT
    DATEPART(YEAR, [Order Date]) AS OrderYear,
    DATEPART(MONTH, [Order Date]) AS OrderMonth,
    AVG(DATEDIFF(DAY, [Order Date], [ship date])) AS AvgProcessingTime
FROM
    superstore..Orders
WHERE
    [Ship Date] IS NOT NULL
GROUP BY
    DATEPART(YEAR, [Order Date]),
    DATEPART(MONTH, [Order Date])
ORDER BY
    year([Order Date]),month([Order Date]);

--Retrieve the top 5 states with the highest number of orders.

SELECT TOP 5 STATE, COUNT([ORDER ID]) AS [ORDER COUNT]
FROM superstore..Orders
GROUP BY[STATE]
ORDER BY COUNT([ORDER ID]) DESC;

--Retrieve the top-selling products for each year, along with the total quantity sold.

SELECT DATEPART(YEAR,[ORDER DATE]) AS [Sales Year], [PRODUCT NAME], ROUND(SUM(SALES),2) AS SALES, SUM(QUANTITY) as Quantity
FROM superstore..Orders
GROUP BY DATEPART(YEAR,[ORDER DATE]), [PRODUCT NAME]
ORDER BY SUM(SALES) DESC;

or 

--Retrieve the sales revenue for each month.

select month([order date]) as Month, round(sum(profit),2) as Revenue
from superstore..Orders
group by month([order date])
order by month([order date]);

--WORKBENCH CODE FOR NEXT QUERIES.

--Retrieve the customers with their total order amount and the running total of order amount in descending order.

SELECT CustomerID, CustomerName, TotalAmount, 
       SUM(TotalAmount) OVER(ORDER BY TotalAmount DESC) AS RunningTotal
FROM (
    SELECT c.CustomerID, c.CustomerName, SUM(o.TotalAmount) AS TotalAmount
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.CustomerID
    GROUP BY c.CustomerID, c.CustomerName
) sub;

OR

SELECT
    c.[Customer ID],
    c.[Customer Name],
    o.TotalOrderAmount,
    SUM(o.TotalOrderAmount) OVER (ORDER BY o.[Order Date] ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningTotal
FROM
    SUPERSTORE..ORDERS c
JOIN
    (
        SELECT
            [Customer ID],
            [Order Date],
            SUM(SALES) AS TotalOrderAmount
        FROM
            SUPERSTORE..Orders
        GROUP BY
            [Customer ID],
            [Order Date]
    ) o ON c.[Customer ID] = o.[Customer ID]
ORDER BY
    RunningTotal DESC, o.[Order Date];



--Retrieve the average order amount for each month, compared to the overall average order amount.

SELECT OrderMonth, AverageAmount,
       AVG(AverageAmount) OVER() AS OverallAverage
FROM (
    SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS OrderMonth, AVG(TotalAmount) AS AverageAmount
    FROM Orders
    GROUP BY OrderMonth
) sub;

OR 

SELECT
    DATEPART(YEAR, [Order Date]) AS OrderYear,
    DATEPART(MONTH, [Order Date]) AS OrderMonth,
    AVG(SALES) AS AverageOrderAmount,
    AVG(SALES) / (SELECT AVG(SALES) FROM superstore..Orders) AS AverageOrderAmountRatio
FROM
    superstore..Orders
GROUP BY
    DATEPART(YEAR, [Order Date]),
    DATEPART(MONTH, [Order Date])
ORDER BY
    OrderYear, OrderMonth;


--Retrieve the top 5 customers with the highest total order amount, along with their rank.

SELECT CustomerID, CustomerName, TotalAmount,
       RANK() OVER(ORDER BY TotalAmount DESC) AS Rank
FROM (
    SELECT c.CustomerID, c.CustomerName, SUM(o.TotalAmount) AS TotalAmount
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.CustomerID
    GROUP BY c.CustomerID, c.CustomerName
) sub
WHERE Rank <= 5;

or

SELECT
    [Customer ID],
    TotalOrderAmount,
    RANK() OVER (ORDER BY TotalOrderAmount DESC) AS Rank
FROM
    (
        SELECT
            [Customer ID],
            SUM(sales) AS TotalOrderAmount
        FROM
            superstore..Orders
        GROUP BY
            [Customer ID]
    ) AS CustomerOrderAmount
ORDER BY
    TotalOrderAmount DESC;


--Retrieve the top-selling products for each year, along with the total quantity sold, using a CTE.

WITH TopProductsByYear AS (
    SELECT YEAR(o.OrderDate) AS Year, oi.ProductID, p.ProductName, 
           SUM(oi.Quantity) AS TotalQuantity,
           ROW_NUMBER() OVER(PARTITION BY YEAR(o.OrderDate) ORDER BY SUM(oi.Quantity) DESC) AS RowNum
    FROM Orders o
    JOIN OrderItems oi ON o.OrderID = oi.OrderID
    JOIN Products p ON oi.ProductID = p.ProductID
    GROUP BY YEAR(o.OrderDate), oi.ProductID, p.ProductName
)
SELECT Year, ProductID, ProductName, TotalQuantity
FROM TopProductsByYear
WHERE RowNum <= 3;

--Retrieve the customers with their total order amount and the running total of order amount in descending order, using a CTE.

WITH CustomerOrderAmount AS (
    SELECT c.CustomerID, c.CustomerName, SUM(o.TotalAmount) AS TotalAmount
    FROM Customers c
    JOIN Orders o ON c.CustomerID = o.CustomerID
    GROUP BY c.CustomerID, c.CustomerName
)
SELECT CustomerID, CustomerName, TotalAmount, 
       SUM(TotalAmount) OVER(ORDER BY TotalAmount DESC) AS RunningTotal
FROM CustomerOrderAmount;

-- query to delete duplicates using rnak

WITH DuplicateRows AS (
    SELECT *, RANK() OVER (PARTITION BY ColumnName1, ColumnName2, ... ORDER BY PrimaryKey) AS RowRank
    FROM YourTable
)
DELETE FROM DuplicateRows
WHERE RowRank > 1;


--query to delete duplicates using cte

WITH DuplicateRows AS (
    SELECT ColumnName1, ColumnName2, ..., ROW_NUMBER() OVER (PARTITION BY ColumnName1, ColumnName2, ... ORDER BY PrimaryKey) AS RowNum
    FROM YourTable
)
DELETE FROM DuplicateRows
WHERE RowNum > 1;







